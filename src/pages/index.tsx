import { type FormEvent, useRef, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";

import { Configuration, OpenAIApi } from "openai";

interface ChatMessage {
  content: string;
  role: string;
}

const openai = new OpenAIApi(
  new Configuration({ apiKey: process.env.NEXT_PUBLIC_GPT_API_KEY })
);

const Home: NextPage = () => {
  const inputRef = useRef<HTMLInputElement>(null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, toggleLoading] = useState<boolean>(false);

  const addNewMessages = (messages: ChatMessage[]) => {
    setMessages((m) => [...m, ...messages]);
  };

  const onSendMessage = (e: FormEvent<HTMLFormElement>) => {
    toggleLoading(true);
    e.preventDefault();
    if (!inputRef.current) return;
    addNewMessages([{ role: "user", content: inputRef.current.value }]);

    openai
      .createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: inputRef.current?.value ?? "" }],
      })
      .then((res) => {
        if (!inputRef.current) return;
        inputRef.current.value = "";

        addNewMessages(
          res.data.choices.map((choice) => choice.message as ChatMessage)
        );
        toggleLoading(false);
      })
      .catch((e) => {
        console.log(e);
      });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <h1>Local GPT</h1>
        <form onSubmit={onSendMessage}>
          <input type="text" placeholder="Write here..." ref={inputRef} />
          <button disabled={isLoading}>send</button>

          {messages.map((m) => (
            <p key={m.content}>
              {m.role}: {m.content}
            </p>
          ))}
          {isLoading && <p>Loading...</p>}
        </form>
      </div>
    </>
  );
};

export default Home;
